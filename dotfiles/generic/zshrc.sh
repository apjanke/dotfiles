# .zshrc - zsh interactive shell configuration
#
# This was originally based on the .zshrc generated by Oh My Zsh, so it may
# have some OMZisms left over. If you don't recognize something in here, that
# could be what it is.

# Debugging prompt with timestamp for profiling under `zsh -x`
#PS4=$'+ %D{%s.%6.} %N:%i> '

if type brew &>/dev/null; then
  HOMEBREW_PREFIX=$(brew --prefix)
fi

# Convert TERMINFO to a multi-entry path and pick up Homebrew's terminfo
# TODO: Detect whether $TERMINFO_DIRS is supported on this system.
# TODO: Conditionalize on whether MacPorts and/or Homebrew are loaded.
() {
  if [[ -z $TERMINFO_DIRS ]]; then
    export TERMINFO_DIRS=~/.terminfo
    if [[ -n $HOMEBREW_PREFIX ]]; then
      TERMINFO_DIRS="$TERMINFO_DIRS:$HOMEBREW_PREFIX/share/terminfo"
    fi
    if [[ -n $TERMINFO ]]; then
      TERMINFO_DIRS="$TERMINFO_DIRS:$TERMINFO"
      TERMINFO=""
    fi
    # Include the default location
    TERMINFO_DIRS="$TERMINFO_DIRS:" 
  fi
}

# Pick up additional site-functions that may not be on system zsh's
# $fpath by default
#
# TODO: Autodetect prefix for Homebrew/MacPorts/etc.
() {
  local site_dir site_dirs

  site_dirs=( /usr/local/share/zsh/site-functions )
  if [[ -n $HOMEBREW_PREFIX ]]; then
    site_dirs+="$HOMEBREW_PREFIX/share/zsh/site-functions"
  fi
  for site_dir ( $site_dirs ); do
    if [[ -d $site_dir  && ${fpath[(I)$site_dir]} == 0 ]]; then
      FPATH="$site_dir:$FPATH"
    fi
  done
}

# Zsh Configurator: Oh My Zsh or Prezto or none

# Load the requested configurator, falling back to stock if it is not
# installed on this system.
#
# Controlled by:
#  $JX_ZSH_CONFIGURATOR - "oh-my-zsh", "prezto", or "none"
#  $JX_OMZ_THEME - theme for OMZ
#  $JX_PREZTO_THEME - theme for Prezto

if [[ $JX_ZSH_CONFIGURATOR == "oh-my-zsh" && -d "$HOME/.oh-my-zsh" ]]; then
  # _OMZ_DEBUG=1
  # _OMZ_DEBUG_SMKX=1
  # DISABLE_OH_MY_ZSH_CUSTOM=1
  # ZSH_THEME=apjanke-01
  ZSH_DEFAULT_USERS=(janke apjanke andrew.janke@demextech.com ajanke-sa)
  AGNOSTER_PATH_STYLE=shrink
  AGNOSTER_RANDOM_EMOJI_REALLY_RANDOM=1
  AGNOSTER_RANDOM_EMOJI_EACH_PROMPT=1
  AGNOSTER_PROMPT_SEGMENTS=(
    random_emoji
    git
    context
    virtualenv
    vaulted
    dir
    kubecontext
    newline
    status
    blank
  )
  ZSH_THEME=${JX_OMZ_THEME:-agnosterj}
  ZSH=${ZSH:-$HOME/.oh-my-zsh}
  plugins=( osx themes )
  source ~/.dots/zshrc-oh-my-zsh.zsh
elif [[ $JX_ZSH_CONFIGURATOR == "prezto" && -d "$HOME/.zprezto" ]]; then
  source ~/.dots/zshrc-prezto.zsh
else
  source ~/.dots/zshrc-nocustomizer.zsh
fi

# OMZ & Prezto sometimes alias these for "safety" to versions that prompt
# on clobber, etc. I don't want that.
#
# TODO: Probably move this in to the dots/zsh-<customizer>.zsh scripts.
unalias mv 2>/dev/null

# Regular non-configurator-driven stuff
#
# This goes after the configurator, so we can override its actions by clobbering.

# Pull in common bash/zsh configuration
if [[ -f "$HOME/.dots/bashyrc.sh" ]]; then 
  source "$HOME/.dots/bashyrc.sh"
fi

# Zsh autocorrect is more trouble than it's worth for me; disable it
setopt no_correct

setopt ignore_eof
setopt no_auto_pushd
setopt no_share_history
setopt no_beep
setopt no_interactivecomments

# Completion control

if which omz_bindkey &>/dev/null; then
  function maybe_bindkey() {
    omz_bindkey -t "$@"
  }
else
  function maybe_bindkey() {
    local cap=$1 widget=$2
    if [[ -n ${terminfo[$cap]} ]]; then
      bindkey ${terminfo[$cap]} $widget
    fi
  }
fi

zstyle ':completion:*' rehash true
#zstyle ':completion:*' completer _complete _ignored
#zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
#zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}'

# Leading substring search for history
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

maybe_bindkey "kcuu1" up-line-or-beginning-search      # [Up-Arrow]
maybe_bindkey "kcud1" down-line-or-beginning-search    # [Down-Arrow]
maybe_bindkey "khome" beginning-of-line
maybe_bindkey "kend" end-of-line

# Miscellaneous options

setopt clobber


# Anaconda
#
# TODO: Make this generic and move to bashyrc.sh, or create a bash-specific
# equivalent.


# Local configuration
#
# Done last so it can override my standard dotfiles stuff.

if [[ -f ~/.zshrc-local ]]; then
  source ~/.zshrc-local
fi

